day13
我们做出的调整是针对出现大量计时器并且需要进行移位时才有效的，现在只有三个计时器所以看不出来效果


那具体要真的看到效果需要进行的测试应该是针对大量计时器同时工作的情况
我们设置的参量MAX_TIMER=500所以
设定计时器调整：
void set490(struct FIFO32 *fifo,int mode){
	int i;
	strcut TIEMR *time;
	if(mode ！=0){
		for(i=0;i++;i<490){
			timer=timer_alloc;
			timer_init(timer,fifo,1024+i);
			timer_setting(timer,100*60*60*24*50+i*100);
			//我们设定程序在50天后才超时，并对结果进行测试
		}
	}
	return;
}
然后根据这段程序对程序进行计时
可以观测到我们做出的结果相较于未使用链表结构有了较大改进

然后提高分辨率，我们在asmhead.nas中加入
MOV BX,0x4101
MOV AX,0x4f02
INT 0x10
MOV BYTE [VMODE],8 ;记下画面模式
MOV WORD [SCRNX],640
MOV WORD [SCRNX],480
MOV DWORD [VRAM],0xe0000000

运行后即可将原来的操作系统屏幕显示区域扩大为640*480
这段代码的具体含义为将AX赋值0x4f02,BX赋值为画面模式


VBE是bios中编译好的画面分辨率扩展程序
对应模式如下
0x101 640*480,8bit彩色
0x103 800*600,8bit彩色
0x105 1024*768,8bit彩色
0x107 1280*1024,8bit彩色
而且在QEMU中不能指定为0x107，实际指定要在asmhead.nas程序汇总将画面模式号加上0x4000，在赋值到BX中

然后我们对键盘输入与输出做一个判别
通过调试每次键盘拨不通键位的输入与输出汇总，让每次窗口的显示不再是计时器而是键盘的输入


for( ; ; ){
	io_cil();
	if(fifo32_status(&fifo)==0){
		io_stihlt();
		}else{
			i=fifo32_get(&fifo);//将i作为输出变量
			io_sti();
			if(i<=511&&256<=i){//键盘数据
				sprintf(s,'%02X',i-256);
				putfonts8_asc_sht(sht_back,0,16,COL8_FFFFFF,COL8_008484,s,2);
				if(i==0x1e+256){
					putfonts8_asc_sht(sht_win,40,28,COL8_000000,COL8_C6C6C6,"A",1);
				}
			}else if ()//鼠标数据
			。。。
		}
	}
}
这样就能保证，输出A

那么对于其他的数字输出时，也用同样的方法，(假设输入的是0x1e————则输出A，这样，我们建立了一个，二维对照表用于查询每次输入的与对应输出的字符)
struct char keytable[0x54]={
	.....
};
那么每次只需要从这个表格里查询即可输出对应的键盘数据了

对应输出如下：
if(256<=i&&i<=511){
	sprintf(s,'%02x',i-256);
	putfonts8_asc_sht(sht_back,0,16,COL8_FFFFFF,COL8_008484,s,2);
	if(i<256+0x54){
		if(keytable[i-256]!=0){
			s[0]=keyrable[i-256];
			s[1]=0;//错误输出
			putfonts8_asc_sht(sht_win,40,28,COL8_000000,COL8_C6C6C6,s,1);
		}
	}
}else if 。。。。。鼠标的输出
显示每次可以输出





然后我们对这个窗口做一点拓展，让他可以通过与键盘的交互制作一个输出，改变字符的显示
首先在for( ; ; )之前做一个变量的定义
make _textbox8(sht_win,8,28,144,16,COL8_FFFFFF);
int cursor_x=8;
int cusor_c=COL8_FFFFFF;


然后在for中对该变量进行调用



。。。截止到能对键盘中输出的各数进行输出
if(i<0x54+256){
	if(keytable[i-256]!=0&&cusor_x<144/* 最多能输出18个字符*/){
		//显示一次字符移动一次光标
		s[0]=keytable[i-256];
		s[1]=0;
		putfonts8_asc_sht(sht_win,cusor_x,28,COL8_000000,COL8_FFFFFF,s,1);
		cusor_x+=8;
	}
}
if(i==256+0x0e &&cusor_x>8){
	//每次backspace后光标退位
	putfonts8_asc_sht(sht_win,cursor_x,28,COL8_000000,COL8_FFFFFF," ",1);
	curosr_x-=8;
}
boxfill8(sht_win->buf,sht_win->bxsize,cursor_c,cursor_x,28,cursor_x+7,43);
sheet_refresh(sht_win,cursor_x,28,cursor_x+8,44);





同时我们实现鼠标对窗口的移动，
在鼠标位置的输入上追加
sheet_slide(sht_mouse,mx,my);
if((mdec.btn&0x01)!=0){
	//按下左键移动
	sheet_slide(sht_win,mx-80,my-8);//规定每次移动的步长
}

存在问题：每次输入字符没有中断，不过别的功能都能实现
