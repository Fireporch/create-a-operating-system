asmhead.nas那些代码

对项目简单分类然后对本系统内存进行操作管理
首先是对内存检查，判定系统可用内存总量大小：

在bookpack.c中添加函数

unsigned int memtest(unsigned int start, unsigned int end)用于对内存中的数据读取并但会

unsigned int memtest_sub(unsigned int start, unsigned int end)对内存检查处理的实现部分
这个程序通过调查从start-old地址范围内的能使用的内存末位地址
如果这个地址能使用，先存原值->再对其原值取反->检查结果是否正确->正确再次取反->再次检查
->然后恢复数据
如果在上述过程中有错误，则报告该地址

并对最初的EFLAGS定义

#define EFLAGS_AC_BIT		0x00040000
#define CR0_CACHE_DISABLE	0x60000000

并且在汇编语言（naskfun.ans）中添加两个函数
_load_cr0：
——store_cr0:
用来禁止缓存，并操作ce0寄存器中的标志位

然后这家伙（指笔者）写程序出bug了，活力啊调查是在c语言的检查上面，过度依赖这个翻译功能了
翻译时，翻译过程中出现反转->验证->再反转->在验证时系统默认结果始终正确因此合并上for语句了
因此对memtest_sub函数修整
unsigned int memtest_sub(unsigned int start,unsigned int end)
{
  unsinged int i;
  for(i= start;i<=end;i+=0x1000){ }
  rentrun i;
  }
即可做到对该系统的内存做一个判定
最后再用
i = memtest(0x00400000, 0xbfffffff) / (1024 * 1024);
	sprintf(s, "memory %dMB", i);
	putfonts8_asc(binfo->vram, binfo->scrnx, 0, 32, COL8_FFFFFF, s);
  对计算结果做一个输出
  over整理完成下面开始正式管理
  
  管理方法简述：
 内存的管理基础分两部分：
 内存的分配
 内存的释放
 假定我们有128MB而且我们通过4Kb进行管理所以我们
  先创造327648个字节的区域，并用0/1来判定那些是可用的
  char a[32768];
  for (i =0;i<1024;i++)
  {
 a[i]=1;//从4MB开始一直在使用
 }
 for （i=1024;i<=32768;i++）{
 a[i]=0//后面的内存地址标记为空
 }


内存分配：
那如果我们需要100kb的内存，只需要从a中找25个连续标记0的地址即可
 j=0；
 for（i=0;i<25;i++）{
  if (a[j+1]!0){
    j++;
    if(j<32768-25) goto 再来一次
    cout<<无可用内存；
  }
}
检查完成后再将连续为[j]--a[j+24]标记为0；


内存释放：
j=0x00123000/0x1000;
for (i=0;i<25;i++){
a[j+i]=0;
}
处理上述管理，还有列表管理法，例举出当前可使用的地址与字节，只需要修整字节表即可完成对内存的修改，而且速度快，响应快
我们采用了一种内存管理手段，并在bootpack.c中实现

创建结构体
struct{//显示可用信息
   unsigned int addr,size; 
}

void memman_init(struct MEMMAN *man)//信息记录类,对主要参数初始化
unsigned int memman_total(struct MEMMAN *man)//计算剩余可用
unsigned int memman_alloc(struct MEMMAN *man, unsigned int size)//分配
int memman_free(struct MEMMAN *man, unsigned int addr, unsigned int size)//释放

综上对于程序的内存分配方法做出里初步的定义


