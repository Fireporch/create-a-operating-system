原有的day4文件缺省，从C语言与画面显示部分开始继续操作系统的创建

#复习
从一开始操作系统的开发通过原始的汇编语言，我们向计算机输入了一些针对内存的指令，通过这些指令创建了初步的登陆，并为我们的操作系统分配了存储空间
运用批处理文件将指令执行，即可得到初始的hello word界面
ipl系统的初步编译全部是通过文本编辑的，通过在!cons_nt.bat执行make
（批处理指令）
即可完成IPL的启动

第三天引入C 文件 bookpack.c辅助编译
通过修改naskfunc.nas文件添加了一个函数用来向指定内存输入
写入语句：
_write_mem8: ;void write_mem8(int addr,int data);
	MOV		ECX,[ESP+4]
	MOV 	AL,[ESP+8]
	MOV 	[ECX],AL
	RET		
通过这个函数即可通过C语言中的write_mem8函数来修改颜色
C语言中调用
void write_mem8(int addr,int data);
并重写HariMain方法
void HariMain(void){
	int i;
	for (i =0xa0000;i<=0xafff;a++){
		write_mem8(i,i&0x0f);
	}	
	for(;;){
		io_hit();
	}//此处是for的无限循环，循环体执行完后不做任何处理
}
这样实现通过C改变内存地址改变色块进而修整颜色了,i&0x0f是地址值与16的与
让输入变成从0-16的循环

然后老贼告诉我们可以直接用char类型指针替代我们写的那个函数，直接向内存地址输入我们想要发送的信息

通过*p=i&0x0f直接将write_mem8替代

解析：上述代码中*p不能看做是指针而应将其视为内存地址
例如：p=(char*)i;
	 *p=i&0x0f;
	 写为汇编语言为：
	 MOV ECX ,i
	 MOV BYTE [ECX],(i&0x0f)
两者区别在于C语句相当于给ECX寄存器赋值，汇编语言相当于给ECX号内存地址赋值

还有补充的色号及相应的字符表示

over那接下来就是我们自己通过C语言来实现对操作系统的界面自定义了


通过修改C中的函数，绘制了一整副启动界面的图像
代码如下：
void io_hlt(void);
void io_cli(void);
void io_out8(int port, int data);
int io_load_eflags(void);
void io_store_eflags(int eflags);

void init_palette(void);
void set_palette(int start, int end, unsigned char *rgb);
void boxfill8(unsigned char *vram, int xsize, unsigned char c, int x0, int y0, int x1, int y1);
//函数原型声明
#define COL8_000000		0
#define COL8_FF0000		1
#define COL8_00FF00		2
#define COL8_FFFF00		3
#define COL8_0000FF		4
#define COL8_FF00FF		5
#define COL8_00FFFF		6
#define COL8_FFFFFF		7
#define COL8_C6C6C6		8
#define COL8_840000		9
#define COL8_008400		10
#define COL8_848400		11
#define COL8_000084		12
#define COL8_840084		13
#define COL8_008484		14
#define COL8_848484		15

void HariMain(void)
{
	char *vram;
	int xsize, ysize;

	init_palette();
	vram = (char *) 0xa0000;
	xsize = 320;
	ysize = 200;

	boxfill8(vram, xsize, COL8_008484,  0,         0,          xsize -  1, ysize - 29);
	boxfill8(vram, xsize, COL8_C6C6C6,  0,         ysize - 28, xsize -  1, ysize - 28);
	boxfill8(vram, xsize, COL8_FFFFFF,  0,         ysize - 27, xsize -  1, ysize - 27);
	boxfill8(vram, xsize, COL8_C6C6C6,  0,         ysize - 26, xsize -  1, ysize -  1);

	boxfill8(vram, xsize, COL8_FFFFFF,  3,         ysize - 24, 59,         ysize - 24);
	boxfill8(vram, xsize, COL8_FFFFFF,  2,         ysize - 24,  2,         ysize -  4);
	boxfill8(vram, xsize, COL8_848484,  3,         ysize -  4, 59,         ysize -  4);
	boxfill8(vram, xsize, COL8_848484, 59,         ysize - 23, 59,         ysize -  5);
	boxfill8(vram, xsize, COL8_000000,  2,         ysize -  3, 59,         ysize -  3);
	boxfill8(vram, xsize, COL8_000000, 60,         ysize - 24, 60,         ysize -  3);

	boxfill8(vram, xsize, COL8_848484, xsize - 47, ysize - 24, xsize -  4, ysize - 24);
	boxfill8(vram, xsize, COL8_848484, xsize - 47, ysize - 23, xsize - 47, ysize -  4);
	boxfill8(vram, xsize, COL8_FFFFFF, xsize - 47, ysize -  3, xsize -  4, ysize -  3);
	boxfill8(vram, xsize, COL8_FFFFFF, xsize -  3, ysize - 24, xsize -  3, ysize -  3);

	for (;;) {
		io_hlt();
	}
}

void init_palette(void)
{
	static unsigned char table_rgb[16 * 3] = {
		0x00, 0x00, 0x00,	/*  0:崟 */
		0xff, 0x00, 0x00,	/*  1:柧傞偄愒 */
		0x00, 0xff, 0x00,	/*  2:柧傞偄椢 */
		0xff, 0xff, 0x00,	/*  3:柧傞偄墿怓 */
		0x00, 0x00, 0xff,	/*  4:柧傞偄惵 */
		0xff, 0x00, 0xff,	/*  5:柧傞偄巼 */
		0x00, 0xff, 0xff,	/*  6:柧傞偄悈怓 */
		0xff, 0xff, 0xff,	/*  7:敀 */
		0xc6, 0xc6, 0xc6,	/*  8:柧傞偄奃怓 */
		0x84, 0x00, 0x00,	/*  9:埫偄愒 */
		0x00, 0x84, 0x00,	/* 10:埫偄椢 */
		0x84, 0x84, 0x00,	/* 11:埫偄墿怓 */
		0x00, 0x00, 0x84,	/* 12:埫偄惵 */
		0x84, 0x00, 0x84,	/* 13:埫偄巼 */
		0x00, 0x84, 0x84,	/* 14:埫偄悈怓 */
		0x84, 0x84, 0x84	/* 15:埫偄奃怓 */
	};
	set_palette(0, 15, table_rgb);
	return;

	/* static char 柦椷偼丄僨乕僞偵偟偐巊偊側偄偗偳DB柦椷憡摉 */
}

void set_palette(int start, int end, unsigned char *rgb)
{
	int i, eflags;
	eflags = io_load_eflags();	/* 妱傝崬傒嫋壜僼儔僌偺抣傪婰榐偡傞 */
	io_cli(); 					/* 嫋壜僼儔僌傪0偵偟偰妱傝崬傒嬛巭偵偡傞 */
	io_out8(0x03c8, start);
	for (i = start; i <= end; i++) {
		io_out8(0x03c9, rgb[0] / 4);
		io_out8(0x03c9, rgb[1] / 4);
		io_out8(0x03c9, rgb[2] / 4);
		rgb += 3;
	}
	io_store_eflags(eflags);	/* 妱傝崬傒嫋壜僼儔僌傪尦偵栠偡 */
	return;
}

void boxfill8(unsigned char *vram, int xsize, unsigned char c, int x0, int y0, int x1, int y1)
{
	int x, y;
	for (y = y0; y <= y1; y++) {
		for (x = x0; x <= x1; x++)
			vram[y * xsize + x] = c;
	}
	return;
}

代码解析
unsigned char表无符号的char，范围为0-255
init_palette()初始化table_rgb
set_palette（int start ,int end,unsigned char *rgb)是通过多次调用io_out8,向指定装置内传送数据
然后boxflill8通过指定x，y的大小来确定框的范围从而绘制矩形

在naskfunc.nas文件中我们预先对C中未声明的函数做出了定义，C只是生命再重新调用罢了
