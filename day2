%软盘第一个扇区称为启动区，计算机读写软盘时，以512个字节为单位读写，因此软盘512个字节为一个扇区，一张软盘空间有1440kb，1474560bt，故共有2880个扇区
%计算机读写时检查第一个扇区最后两个字节是否为0x55AA，故认为第一个扇区开头是启动程序
%继续编写系统，先下载了一个文本编译器

;hello-os
;TAB=4

		ORG 0x7c00 		;指明程序装载地址
;以下的记述用于标准的FAT12格式的软盘
	JMP 	entry ;JMP用于跳转，entry是标签的声明，表示jump to entry跳到入口
	DB 0x90



	;程序核心
entry：
		MOV AX,0		;初始化寄存器
		MOV SS,AX
		MOV SP,0x7c00
		MOV DS,AX
		MOV ES,AX

		MOV SI,msg
	putloop:
		MOV AL,[SI]
		ADD SI,1
		CMP AL,0

		JE fin
		MOV AH,0x0e;
		MOV BX,15
		INT 0x10
		JMP putloop
	fun:
		HLT;
		JMP fin;
	msg:
		DB 0x0a,0x0a	;换行两次
		DB "hello,world"
		DB 0x0a			;换行
		DB 0
;JMP用于跳转，entry是标签的声明，表示jump to entry跳到入口
;ORG这个指令会告诉nask，在开始执行时，机器语言应该在内存中的位置，ORG 跳转时不能随便跳，程序在出厂设置BIOS程序用来实现各种功能，
;BIOS本体在0xf0000附近，他所占用的位置及程序使用部分内存都不可调用


;内存中定义的启动内容的装载地址在0x00007c00-0x00007dff


;这一堆的MOV表示赋值，比如MOV A,0相当于A=0
;AX————accumulator，累加寄存器
;cx————counter ,记数寄存器
;dx————data ,数据寄存器
;bx————base,基址寄存器
;sp————stack pointer,栈指针寄存器
;BP————base pointer,基址指针寄存器
;SI————source index,源变址寄存器
;DI————destination index,目的变址寄存器

;上述16位寄存器来存储二进制数，能存exp（2,16）个数
;寄存器按照类型与存储量来命名，上述用到的都是16位的寄存器，cpu还有8个8位的寄存器，cl，dl，bl，ah，ch，dh，bh
;ax寄存器共16位，0-7位称为al，8-15位称为ah，更高级的寄存器（32位） Eax，Ecx，Edx....
;除了上面用到的寄存器，还有一个段寄存器（segment register），es， cs ，ss



;MOV SI,msg中的msg代表的是他所在的地址，跟上面entry一样，entry实际执行是将ax写入0x7c50，所以msg代表0x7c74，这个代码相当于将SI寄存器写入0x7c74
;个人将FTC14编码中特殊字符指代的地址换位C语言中的指针来理解



;MOV AL，[SI],将SI框起来表示内存位置
;内存是用于存储cpu处理后的信息的位置，cpu本身一堆寄存器，存不了多少东西，算好的数据我们就把这些东西放在内存里

;内存在cpu外头，实际上是外部存储器，cpu与内存之间通过芯片控制，cpu算的很快，但是数据实际的读取与传播耗时不小，
;所以程序实际运行时间同时受制cpu运算速度与内存的读取速度
;MOV BYTE[678],123表示用内存的678号地址来保存123这个数字，而且实际运行中678这个位置是逻辑单位，实际物理存在8个存储单元响应并通过电信号保存123这个数
;MOV WORD[678],123响应的就是16个单位，逻辑上是678上8个跟679上8个，低位存123，高位存00000000



;MOV在移动数据时必须保证移动数据的位数相同，ADD是加法指令，ADD SI，1相当于SI+1
;CMP表示比较，例如CMP a,3 相当于if（a==3）{处理;},源自于compare
;JE是跳转，跟cmp搭配  CMP al,0    JE fin 相当于 if（al==0）{goto fin；},fin是个标号，我们定义为结束（finish）


;INT软件中断指令，现在现将其看做一个函数

;HIT用于让cpu停止动作，进入待机状态

%C语言实现上面的东西大概就是：
entry:
	AX=0;
	SS=AX;
	SP=0x7c00;
	DS=AX;
	ES=AX;
	SI=msg;
putloop:
	AL=BYTE[SI];
	SI=SI+1;
	if(AL==0){goto fin;}
	AH=0x0e;
	BX=15;
	INT 0x10;
	goto putloop;
fin:
	HLT;
	goto fin;
%%这个程序就可以将msg里面写入数据，并且让数据显示出来，当数据变为0以后，HLT让程序进入无限循环，hello world就可以显示出来了






;然后呢今天基本熟悉了一部分关于FTP14语言的指令，及如何设置启动器
;我们先将512字节做启动区，剩下用磁盘映像管理工具做







